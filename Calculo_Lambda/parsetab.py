
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionrightLAMBDAVARIABLETWOPOINTSPOINTrightIFTHENELSErightSUCCOPENPARENCLOSEPARENrightISZEROOPENPARENCLOSEPARENrightZEROrightTRUErightFALSEVARIABLE TRUE FALSE IF THEN ELSE LAMBDA TWOPOINTS POINT ZERO SUCC OPENPAREN CLOSEPAREN PRED ISZERO BOOL NAT ARROWexpression : VARIABLEexpression : TRUEexpression : FALSEexpression : IF expression THEN expression ELSE expressionexpression : LAMBDA VARIABLE TWOPOINTS type POINT expressionexpression : OPENPAREN expression CLOSEPARENexpression : expression expressionexpression : ZEROexpression : SUCC OPENPAREN expression CLOSEPARENexpression : PRED OPENPAREN expression CLOSEPARENexpression : ISZERO OPENPAREN expression CLOSEPARENtype : BOOLtype : NATtype : type ARROW type'
    
_lr_action_items = {'$end':([2,3,6,7,9,13,23,25,26,27,36,37,],[-3,0,-8,-1,-2,-7,-6,-11,-9,-10,-5,-4,]),'FALSE':([0,2,3,6,7,9,10,11,12,13,14,15,17,18,19,20,21,23,24,25,26,27,31,33,34,36,37,],[2,-3,2,-8,-1,-2,2,2,2,2,2,2,2,2,2,2,2,-6,2,-11,-9,-10,2,2,2,2,2,]),'NAT':([22,32,],[28,28,]),'THEN':([2,6,7,9,13,18,23,25,26,27,36,37,],[-3,-8,-1,-2,-7,24,-6,-11,-9,-10,-5,-4,]),'PRED':([0,2,3,6,7,9,10,11,12,13,14,15,17,18,19,20,21,23,24,25,26,27,31,33,34,36,37,],[5,-3,5,-8,-1,-2,5,5,5,5,5,5,5,5,5,5,5,-6,5,-11,-9,-10,5,5,5,-5,-4,]),'CLOSEPAREN':([2,6,7,9,13,17,19,20,21,23,25,26,27,36,37,],[-3,-8,-1,-2,-7,23,25,26,27,-6,-11,-9,-10,-5,-4,]),'POINT':([28,29,30,35,],[-13,33,-12,-14,]),'ARROW':([28,29,30,35,],[-13,32,-12,32,]),'ZERO':([0,2,3,6,7,9,10,11,12,13,14,15,17,18,19,20,21,23,24,25,26,27,31,33,34,36,37,],[6,-3,6,-8,-1,-2,6,6,6,6,6,6,6,6,6,6,6,-6,6,-11,-9,-10,6,6,6,6,6,]),'ELSE':([2,6,7,9,13,23,25,26,27,31,36,37,],[-3,-8,-1,-2,-7,-6,-11,-9,-10,34,-5,-4,]),'VARIABLE':([0,2,3,6,7,8,9,10,11,12,13,14,15,17,18,19,20,21,23,24,25,26,27,31,33,34,36,37,],[7,-3,7,-8,-1,16,-2,7,7,7,7,7,7,7,7,7,7,7,-6,7,-11,-9,-10,7,7,7,7,-4,]),'SUCC':([0,2,3,6,7,9,10,11,12,13,14,15,17,18,19,20,21,23,24,25,26,27,31,33,34,36,37,],[4,-3,4,-8,-1,-2,4,4,4,4,4,4,4,4,4,4,4,-6,4,-11,-9,-10,4,4,4,4,4,]),'BOOL':([22,32,],[30,30,]),'TWOPOINTS':([16,],[22,]),'ISZERO':([0,2,3,6,7,9,10,11,12,13,14,15,17,18,19,20,21,23,24,25,26,27,31,33,34,36,37,],[1,-3,1,-8,-1,-2,1,1,1,1,1,1,1,1,1,1,1,-6,1,-11,-9,-10,1,1,1,1,1,]),'LAMBDA':([0,2,3,6,7,9,10,11,12,13,14,15,17,18,19,20,21,23,24,25,26,27,31,33,34,36,37,],[8,-3,8,-8,-1,-2,8,8,8,8,8,8,8,8,8,8,8,-6,8,-11,-9,-10,8,8,8,8,-4,]),'TRUE':([0,2,3,6,7,9,10,11,12,13,14,15,17,18,19,20,21,23,24,25,26,27,31,33,34,36,37,],[9,-3,9,-8,-1,-2,9,9,9,9,9,9,9,9,9,9,9,-6,9,-11,-9,-10,9,9,9,9,9,]),'OPENPAREN':([0,1,2,3,4,5,6,7,9,10,11,12,13,14,15,17,18,19,20,21,23,24,25,26,27,31,33,34,36,37,],[10,12,-3,10,14,15,-8,-1,-2,10,10,10,10,10,10,10,10,10,10,10,-6,10,-11,-9,-10,10,10,10,10,10,]),'IF':([0,2,3,6,7,9,10,11,12,13,14,15,17,18,19,20,21,23,24,25,26,27,31,33,34,36,37,],[11,-3,11,-8,-1,-2,11,11,11,11,11,11,11,11,11,11,11,-6,11,-11,-9,-10,11,11,11,11,11,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'type':([22,32,],[29,35,]),'expression':([0,3,10,11,12,13,14,15,17,18,19,20,21,24,31,33,34,36,37,],[3,13,17,18,19,13,20,21,13,13,13,13,13,31,13,36,37,13,13,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> VARIABLE','expression',1,'p_expression_variable','parser.py',20),
  ('expression -> TRUE','expression',1,'p_expression_true','parser.py',24),
  ('expression -> FALSE','expression',1,'p_expresion_false','parser.py',28),
  ('expression -> IF expression THEN expression ELSE expression','expression',6,'p_expression_if','parser.py',32),
  ('expression -> LAMBDA VARIABLE TWOPOINTS type POINT expression','expression',6,'p_expression_lambda','parser.py',36),
  ('expression -> OPENPAREN expression CLOSEPAREN','expression',3,'p_expression_with_paren','parser.py',48),
  ('expression -> expression expression','expression',2,'p_expression_expression_expression','parser.py',54),
  ('expression -> ZERO','expression',1,'p_expresion_zero','parser.py',61),
  ('expression -> SUCC OPENPAREN expression CLOSEPAREN','expression',4,'p_expression_succ','parser.py',65),
  ('expression -> PRED OPENPAREN expression CLOSEPAREN','expression',4,'p_expression_pred','parser.py',69),
  ('expression -> ISZERO OPENPAREN expression CLOSEPAREN','expression',4,'p_expression_izsero','parser.py',73),
  ('type -> BOOL','type',1,'p_type_bool','parser.py',77),
  ('type -> NAT','type',1,'p_type_nat','parser.py',81),
  ('type -> type ARROW type','type',3,'p_type_type_type','parser.py',85),
]
