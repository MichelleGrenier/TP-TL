
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionVARIABLE TRUE FALSE IF THEN ELSE LAMBDA TWOPOINTS POINT ZERO SUCC OPENPAREN CLOSEPAREN PRED ISZERO BOOL NAT ARROWexpression : VARIABLEexpression : TRUEexpression : FALSEexpression : IF expression THEN expression ELSE expressionexpression : LAMBDA expression TWOPOINTS type POINT expressionexpression : OPENPAREN expression CLOSEPAREN expressionexpression : ZEROexpression : SUCC OPENPAREN expression CLOSEPARENexpression : PRED OPENPAREN expression CLOSEPARENexpression : ISZERO OPENPAREN expression CLOSEPARENtype : BOOLtype : NATtype : type ARROW type'
    
_lr_action_items = {'THEN':([2,6,7,9,17,24,25,26,30,35,37,],[-3,-7,-1,-2,23,-10,-8,-9,-6,-5,-4,]),'FALSE':([0,8,10,11,12,13,14,22,23,32,34,],[2,2,2,2,2,2,2,2,2,2,2,]),'NAT':([21,33,],[27,27,]),'POINT':([27,28,29,36,],[-12,-11,32,-13,]),'PRED':([0,8,10,11,12,13,14,22,23,32,34,],[5,5,5,5,5,5,5,5,5,5,5,]),'CLOSEPAREN':([2,6,7,9,16,18,19,20,24,25,26,30,35,37,],[-3,-7,-1,-2,22,24,25,26,-10,-8,-9,-6,-5,-4,]),'$end':([2,3,6,7,9,24,25,26,30,35,37,],[-3,0,-7,-1,-2,-10,-8,-9,-6,-5,-4,]),'ARROW':([27,28,29,36,],[-12,-11,33,33,]),'ZERO':([0,8,10,11,12,13,14,22,23,32,34,],[6,6,6,6,6,6,6,6,6,6,6,]),'ELSE':([2,6,7,9,24,25,26,30,31,35,37,],[-3,-7,-1,-2,-10,-8,-9,-6,34,-5,-4,]),'VARIABLE':([0,8,10,11,12,13,14,22,23,32,34,],[7,7,7,7,7,7,7,7,7,7,7,]),'SUCC':([0,8,10,11,12,13,14,22,23,32,34,],[4,4,4,4,4,4,4,4,4,4,4,]),'BOOL':([21,33,],[28,28,]),'TWOPOINTS':([2,6,7,9,15,24,25,26,30,35,37,],[-3,-7,-1,-2,21,-10,-8,-9,-6,-5,-4,]),'ISZERO':([0,8,10,11,12,13,14,22,23,32,34,],[1,1,1,1,1,1,1,1,1,1,1,]),'LAMBDA':([0,8,10,11,12,13,14,22,23,32,34,],[8,8,8,8,8,8,8,8,8,8,8,]),'TRUE':([0,8,10,11,12,13,14,22,23,32,34,],[9,9,9,9,9,9,9,9,9,9,9,]),'OPENPAREN':([0,1,4,5,8,10,11,12,13,14,22,23,32,34,],[10,12,13,14,10,10,10,10,10,10,10,10,10,10,]),'IF':([0,8,10,11,12,13,14,22,23,32,34,],[11,11,11,11,11,11,11,11,11,11,11,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'type':([21,33,],[29,36,]),'expression':([0,8,10,11,12,13,14,22,23,32,34,],[3,15,16,17,18,19,20,30,31,35,37,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> VARIABLE','expression',1,'p_expression_variable','parser.py',9),
  ('expression -> TRUE','expression',1,'p_expression_true','parser.py',13),
  ('expression -> FALSE','expression',1,'p_expresion_false','parser.py',17),
  ('expression -> IF expression THEN expression ELSE expression','expression',6,'p_expression_if','parser.py',21),
  ('expression -> LAMBDA expression TWOPOINTS type POINT expression','expression',6,'p_expression_lambda','parser.py',25),
  ('expression -> OPENPAREN expression CLOSEPAREN expression','expression',4,'p_expression_expression_expression','parser.py',29),
  ('expression -> ZERO','expression',1,'p_expresion_zero','parser.py',33),
  ('expression -> SUCC OPENPAREN expression CLOSEPAREN','expression',4,'p_expression_succ','parser.py',37),
  ('expression -> PRED OPENPAREN expression CLOSEPAREN','expression',4,'p_expression_pred','parser.py',41),
  ('expression -> ISZERO OPENPAREN expression CLOSEPAREN','expression',4,'p_expression_izsero','parser.py',45),
  ('type -> BOOL','type',1,'p_type_bool','parser.py',49),
  ('type -> NAT','type',1,'p_type_nat','parser.py',53),
  ('type -> type ARROW type','type',3,'p_type_type_type','parser.py',57),
]
