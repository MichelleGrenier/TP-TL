Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> LAMBDA VARIABLE TWOPOINTS type POINT expression
Rule 2     expression -> expression2
Rule 3     expression2 -> IF expression THEN expression ELSE expression
Rule 4     expression2 -> expression3
Rule 5     expression3 -> expression4 expression5
Rule 6     expression5 -> expression
Rule 7     expression5 -> <empty>
Rule 8     expression4 -> SUCC OPENPAREN expression CLOSEPAREN
Rule 9     expression4 -> PRED OPENPAREN expression CLOSEPAREN
Rule 10    expression4 -> ISZERO OPENPAREN expression CLOSEPAREN
Rule 11    expression4 -> expression6
Rule 12    expression6 -> TRUE
Rule 13    expression6 -> FALSE
Rule 14    expression6 -> ZERO
Rule 15    expression6 -> VARIABLE
Rule 16    expression6 -> OPENPAREN expression CLOSEPAREN
Rule 17    type -> BOOL T
Rule 18    type -> NAT T
Rule 19    T -> ARROW type
Rule 20    T -> <empty>

Terminals, with rules where they appear

ARROW                : 19
BOOL                 : 17
CLOSEPAREN           : 8 9 10 16
ELSE                 : 3
FALSE                : 13
IF                   : 3
ISZERO               : 10
LAMBDA               : 1
NAT                  : 18
OPENPAREN            : 8 9 10 16
POINT                : 1
PRED                 : 9
SUCC                 : 8
THEN                 : 3
TRUE                 : 12
TWOPOINTS            : 1
VARIABLE             : 1 15
ZERO                 : 14
error                : 

Nonterminals, with rules where they appear

T                    : 17 18
expression           : 1 3 3 3 6 8 9 10 16 0
expression2          : 2
expression3          : 4
expression4          : 5
expression5          : 5
expression6          : 11
type                 : 1 19

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . LAMBDA VARIABLE TWOPOINTS type POINT expression
    (2) expression -> . expression2
    (3) expression2 -> . IF expression THEN expression ELSE expression
    (4) expression2 -> . expression3
    (5) expression3 -> . expression4 expression5
    (8) expression4 -> . SUCC OPENPAREN expression CLOSEPAREN
    (9) expression4 -> . PRED OPENPAREN expression CLOSEPAREN
    (10) expression4 -> . ISZERO OPENPAREN expression CLOSEPAREN
    (11) expression4 -> . expression6
    (12) expression6 -> . TRUE
    (13) expression6 -> . FALSE
    (14) expression6 -> . ZERO
    (15) expression6 -> . VARIABLE
    (16) expression6 -> . OPENPAREN expression CLOSEPAREN

    LAMBDA          shift and go to state 15
    IF              shift and go to state 5
    SUCC            shift and go to state 1
    PRED            shift and go to state 13
    ISZERO          shift and go to state 2
    TRUE            shift and go to state 3
    FALSE           shift and go to state 12
    ZERO            shift and go to state 6
    VARIABLE        shift and go to state 7
    OPENPAREN       shift and go to state 4

    expression                     shift and go to state 14
    expression3                    shift and go to state 8
    expression2                    shift and go to state 9
    expression4                    shift and go to state 10
    expression6                    shift and go to state 11

state 1

    (8) expression4 -> SUCC . OPENPAREN expression CLOSEPAREN

    OPENPAREN       shift and go to state 16


state 2

    (10) expression4 -> ISZERO . OPENPAREN expression CLOSEPAREN

    OPENPAREN       shift and go to state 17


state 3

    (12) expression6 -> TRUE .

    LAMBDA          reduce using rule 12 (expression6 -> TRUE .)
    IF              reduce using rule 12 (expression6 -> TRUE .)
    SUCC            reduce using rule 12 (expression6 -> TRUE .)
    PRED            reduce using rule 12 (expression6 -> TRUE .)
    ISZERO          reduce using rule 12 (expression6 -> TRUE .)
    TRUE            reduce using rule 12 (expression6 -> TRUE .)
    FALSE           reduce using rule 12 (expression6 -> TRUE .)
    ZERO            reduce using rule 12 (expression6 -> TRUE .)
    VARIABLE        reduce using rule 12 (expression6 -> TRUE .)
    OPENPAREN       reduce using rule 12 (expression6 -> TRUE .)
    $end            reduce using rule 12 (expression6 -> TRUE .)
    CLOSEPAREN      reduce using rule 12 (expression6 -> TRUE .)
    THEN            reduce using rule 12 (expression6 -> TRUE .)
    ELSE            reduce using rule 12 (expression6 -> TRUE .)


state 4

    (16) expression6 -> OPENPAREN . expression CLOSEPAREN
    (1) expression -> . LAMBDA VARIABLE TWOPOINTS type POINT expression
    (2) expression -> . expression2
    (3) expression2 -> . IF expression THEN expression ELSE expression
    (4) expression2 -> . expression3
    (5) expression3 -> . expression4 expression5
    (8) expression4 -> . SUCC OPENPAREN expression CLOSEPAREN
    (9) expression4 -> . PRED OPENPAREN expression CLOSEPAREN
    (10) expression4 -> . ISZERO OPENPAREN expression CLOSEPAREN
    (11) expression4 -> . expression6
    (12) expression6 -> . TRUE
    (13) expression6 -> . FALSE
    (14) expression6 -> . ZERO
    (15) expression6 -> . VARIABLE
    (16) expression6 -> . OPENPAREN expression CLOSEPAREN

    LAMBDA          shift and go to state 15
    IF              shift and go to state 5
    SUCC            shift and go to state 1
    PRED            shift and go to state 13
    ISZERO          shift and go to state 2
    TRUE            shift and go to state 3
    FALSE           shift and go to state 12
    ZERO            shift and go to state 6
    VARIABLE        shift and go to state 7
    OPENPAREN       shift and go to state 4

    expression                     shift and go to state 18
    expression3                    shift and go to state 8
    expression2                    shift and go to state 9
    expression4                    shift and go to state 10
    expression6                    shift and go to state 11

state 5

    (3) expression2 -> IF . expression THEN expression ELSE expression
    (1) expression -> . LAMBDA VARIABLE TWOPOINTS type POINT expression
    (2) expression -> . expression2
    (3) expression2 -> . IF expression THEN expression ELSE expression
    (4) expression2 -> . expression3
    (5) expression3 -> . expression4 expression5
    (8) expression4 -> . SUCC OPENPAREN expression CLOSEPAREN
    (9) expression4 -> . PRED OPENPAREN expression CLOSEPAREN
    (10) expression4 -> . ISZERO OPENPAREN expression CLOSEPAREN
    (11) expression4 -> . expression6
    (12) expression6 -> . TRUE
    (13) expression6 -> . FALSE
    (14) expression6 -> . ZERO
    (15) expression6 -> . VARIABLE
    (16) expression6 -> . OPENPAREN expression CLOSEPAREN

    LAMBDA          shift and go to state 15
    IF              shift and go to state 5
    SUCC            shift and go to state 1
    PRED            shift and go to state 13
    ISZERO          shift and go to state 2
    TRUE            shift and go to state 3
    FALSE           shift and go to state 12
    ZERO            shift and go to state 6
    VARIABLE        shift and go to state 7
    OPENPAREN       shift and go to state 4

    expression                     shift and go to state 19
    expression3                    shift and go to state 8
    expression2                    shift and go to state 9
    expression4                    shift and go to state 10
    expression6                    shift and go to state 11

state 6

    (14) expression6 -> ZERO .

    LAMBDA          reduce using rule 14 (expression6 -> ZERO .)
    IF              reduce using rule 14 (expression6 -> ZERO .)
    SUCC            reduce using rule 14 (expression6 -> ZERO .)
    PRED            reduce using rule 14 (expression6 -> ZERO .)
    ISZERO          reduce using rule 14 (expression6 -> ZERO .)
    TRUE            reduce using rule 14 (expression6 -> ZERO .)
    FALSE           reduce using rule 14 (expression6 -> ZERO .)
    ZERO            reduce using rule 14 (expression6 -> ZERO .)
    VARIABLE        reduce using rule 14 (expression6 -> ZERO .)
    OPENPAREN       reduce using rule 14 (expression6 -> ZERO .)
    $end            reduce using rule 14 (expression6 -> ZERO .)
    CLOSEPAREN      reduce using rule 14 (expression6 -> ZERO .)
    THEN            reduce using rule 14 (expression6 -> ZERO .)
    ELSE            reduce using rule 14 (expression6 -> ZERO .)


state 7

    (15) expression6 -> VARIABLE .

    LAMBDA          reduce using rule 15 (expression6 -> VARIABLE .)
    IF              reduce using rule 15 (expression6 -> VARIABLE .)
    SUCC            reduce using rule 15 (expression6 -> VARIABLE .)
    PRED            reduce using rule 15 (expression6 -> VARIABLE .)
    ISZERO          reduce using rule 15 (expression6 -> VARIABLE .)
    TRUE            reduce using rule 15 (expression6 -> VARIABLE .)
    FALSE           reduce using rule 15 (expression6 -> VARIABLE .)
    ZERO            reduce using rule 15 (expression6 -> VARIABLE .)
    VARIABLE        reduce using rule 15 (expression6 -> VARIABLE .)
    OPENPAREN       reduce using rule 15 (expression6 -> VARIABLE .)
    $end            reduce using rule 15 (expression6 -> VARIABLE .)
    CLOSEPAREN      reduce using rule 15 (expression6 -> VARIABLE .)
    THEN            reduce using rule 15 (expression6 -> VARIABLE .)
    ELSE            reduce using rule 15 (expression6 -> VARIABLE .)


state 8

    (4) expression2 -> expression3 .

    $end            reduce using rule 4 (expression2 -> expression3 .)
    CLOSEPAREN      reduce using rule 4 (expression2 -> expression3 .)
    THEN            reduce using rule 4 (expression2 -> expression3 .)
    ELSE            reduce using rule 4 (expression2 -> expression3 .)


state 9

    (2) expression -> expression2 .

    CLOSEPAREN      reduce using rule 2 (expression -> expression2 .)
    ELSE            reduce using rule 2 (expression -> expression2 .)
    $end            reduce using rule 2 (expression -> expression2 .)
    THEN            reduce using rule 2 (expression -> expression2 .)


state 10

    (5) expression3 -> expression4 . expression5
    (6) expression5 -> . expression
    (7) expression5 -> .
    (1) expression -> . LAMBDA VARIABLE TWOPOINTS type POINT expression
    (2) expression -> . expression2
    (3) expression2 -> . IF expression THEN expression ELSE expression
    (4) expression2 -> . expression3
    (5) expression3 -> . expression4 expression5
    (8) expression4 -> . SUCC OPENPAREN expression CLOSEPAREN
    (9) expression4 -> . PRED OPENPAREN expression CLOSEPAREN
    (10) expression4 -> . ISZERO OPENPAREN expression CLOSEPAREN
    (11) expression4 -> . expression6
    (12) expression6 -> . TRUE
    (13) expression6 -> . FALSE
    (14) expression6 -> . ZERO
    (15) expression6 -> . VARIABLE
    (16) expression6 -> . OPENPAREN expression CLOSEPAREN

    $end            reduce using rule 7 (expression5 -> .)
    CLOSEPAREN      reduce using rule 7 (expression5 -> .)
    THEN            reduce using rule 7 (expression5 -> .)
    ELSE            reduce using rule 7 (expression5 -> .)
    LAMBDA          shift and go to state 15
    IF              shift and go to state 5
    SUCC            shift and go to state 1
    PRED            shift and go to state 13
    ISZERO          shift and go to state 2
    TRUE            shift and go to state 3
    FALSE           shift and go to state 12
    ZERO            shift and go to state 6
    VARIABLE        shift and go to state 7
    OPENPAREN       shift and go to state 4

    expression5                    shift and go to state 20
    expression3                    shift and go to state 8
    expression2                    shift and go to state 9
    expression                     shift and go to state 21
    expression4                    shift and go to state 10
    expression6                    shift and go to state 11

state 11

    (11) expression4 -> expression6 .

    LAMBDA          reduce using rule 11 (expression4 -> expression6 .)
    IF              reduce using rule 11 (expression4 -> expression6 .)
    SUCC            reduce using rule 11 (expression4 -> expression6 .)
    PRED            reduce using rule 11 (expression4 -> expression6 .)
    ISZERO          reduce using rule 11 (expression4 -> expression6 .)
    TRUE            reduce using rule 11 (expression4 -> expression6 .)
    FALSE           reduce using rule 11 (expression4 -> expression6 .)
    ZERO            reduce using rule 11 (expression4 -> expression6 .)
    VARIABLE        reduce using rule 11 (expression4 -> expression6 .)
    OPENPAREN       reduce using rule 11 (expression4 -> expression6 .)
    $end            reduce using rule 11 (expression4 -> expression6 .)
    CLOSEPAREN      reduce using rule 11 (expression4 -> expression6 .)
    THEN            reduce using rule 11 (expression4 -> expression6 .)
    ELSE            reduce using rule 11 (expression4 -> expression6 .)


state 12

    (13) expression6 -> FALSE .

    LAMBDA          reduce using rule 13 (expression6 -> FALSE .)
    IF              reduce using rule 13 (expression6 -> FALSE .)
    SUCC            reduce using rule 13 (expression6 -> FALSE .)
    PRED            reduce using rule 13 (expression6 -> FALSE .)
    ISZERO          reduce using rule 13 (expression6 -> FALSE .)
    TRUE            reduce using rule 13 (expression6 -> FALSE .)
    FALSE           reduce using rule 13 (expression6 -> FALSE .)
    ZERO            reduce using rule 13 (expression6 -> FALSE .)
    VARIABLE        reduce using rule 13 (expression6 -> FALSE .)
    OPENPAREN       reduce using rule 13 (expression6 -> FALSE .)
    $end            reduce using rule 13 (expression6 -> FALSE .)
    CLOSEPAREN      reduce using rule 13 (expression6 -> FALSE .)
    THEN            reduce using rule 13 (expression6 -> FALSE .)
    ELSE            reduce using rule 13 (expression6 -> FALSE .)


state 13

    (9) expression4 -> PRED . OPENPAREN expression CLOSEPAREN

    OPENPAREN       shift and go to state 22


state 14

    (0) S' -> expression .



state 15

    (1) expression -> LAMBDA . VARIABLE TWOPOINTS type POINT expression

    VARIABLE        shift and go to state 23


state 16

    (8) expression4 -> SUCC OPENPAREN . expression CLOSEPAREN
    (1) expression -> . LAMBDA VARIABLE TWOPOINTS type POINT expression
    (2) expression -> . expression2
    (3) expression2 -> . IF expression THEN expression ELSE expression
    (4) expression2 -> . expression3
    (5) expression3 -> . expression4 expression5
    (8) expression4 -> . SUCC OPENPAREN expression CLOSEPAREN
    (9) expression4 -> . PRED OPENPAREN expression CLOSEPAREN
    (10) expression4 -> . ISZERO OPENPAREN expression CLOSEPAREN
    (11) expression4 -> . expression6
    (12) expression6 -> . TRUE
    (13) expression6 -> . FALSE
    (14) expression6 -> . ZERO
    (15) expression6 -> . VARIABLE
    (16) expression6 -> . OPENPAREN expression CLOSEPAREN

    LAMBDA          shift and go to state 15
    IF              shift and go to state 5
    SUCC            shift and go to state 1
    PRED            shift and go to state 13
    ISZERO          shift and go to state 2
    TRUE            shift and go to state 3
    FALSE           shift and go to state 12
    ZERO            shift and go to state 6
    VARIABLE        shift and go to state 7
    OPENPAREN       shift and go to state 4

    expression                     shift and go to state 24
    expression3                    shift and go to state 8
    expression2                    shift and go to state 9
    expression4                    shift and go to state 10
    expression6                    shift and go to state 11

state 17

    (10) expression4 -> ISZERO OPENPAREN . expression CLOSEPAREN
    (1) expression -> . LAMBDA VARIABLE TWOPOINTS type POINT expression
    (2) expression -> . expression2
    (3) expression2 -> . IF expression THEN expression ELSE expression
    (4) expression2 -> . expression3
    (5) expression3 -> . expression4 expression5
    (8) expression4 -> . SUCC OPENPAREN expression CLOSEPAREN
    (9) expression4 -> . PRED OPENPAREN expression CLOSEPAREN
    (10) expression4 -> . ISZERO OPENPAREN expression CLOSEPAREN
    (11) expression4 -> . expression6
    (12) expression6 -> . TRUE
    (13) expression6 -> . FALSE
    (14) expression6 -> . ZERO
    (15) expression6 -> . VARIABLE
    (16) expression6 -> . OPENPAREN expression CLOSEPAREN

    LAMBDA          shift and go to state 15
    IF              shift and go to state 5
    SUCC            shift and go to state 1
    PRED            shift and go to state 13
    ISZERO          shift and go to state 2
    TRUE            shift and go to state 3
    FALSE           shift and go to state 12
    ZERO            shift and go to state 6
    VARIABLE        shift and go to state 7
    OPENPAREN       shift and go to state 4

    expression                     shift and go to state 25
    expression3                    shift and go to state 8
    expression2                    shift and go to state 9
    expression4                    shift and go to state 10
    expression6                    shift and go to state 11

state 18

    (16) expression6 -> OPENPAREN expression . CLOSEPAREN

    CLOSEPAREN      shift and go to state 26


state 19

    (3) expression2 -> IF expression . THEN expression ELSE expression

    THEN            shift and go to state 27


state 20

    (5) expression3 -> expression4 expression5 .

    ELSE            reduce using rule 5 (expression3 -> expression4 expression5 .)
    CLOSEPAREN      reduce using rule 5 (expression3 -> expression4 expression5 .)
    $end            reduce using rule 5 (expression3 -> expression4 expression5 .)
    THEN            reduce using rule 5 (expression3 -> expression4 expression5 .)


state 21

    (6) expression5 -> expression .

    $end            reduce using rule 6 (expression5 -> expression .)
    CLOSEPAREN      reduce using rule 6 (expression5 -> expression .)
    THEN            reduce using rule 6 (expression5 -> expression .)
    ELSE            reduce using rule 6 (expression5 -> expression .)


state 22

    (9) expression4 -> PRED OPENPAREN . expression CLOSEPAREN
    (1) expression -> . LAMBDA VARIABLE TWOPOINTS type POINT expression
    (2) expression -> . expression2
    (3) expression2 -> . IF expression THEN expression ELSE expression
    (4) expression2 -> . expression3
    (5) expression3 -> . expression4 expression5
    (8) expression4 -> . SUCC OPENPAREN expression CLOSEPAREN
    (9) expression4 -> . PRED OPENPAREN expression CLOSEPAREN
    (10) expression4 -> . ISZERO OPENPAREN expression CLOSEPAREN
    (11) expression4 -> . expression6
    (12) expression6 -> . TRUE
    (13) expression6 -> . FALSE
    (14) expression6 -> . ZERO
    (15) expression6 -> . VARIABLE
    (16) expression6 -> . OPENPAREN expression CLOSEPAREN

    LAMBDA          shift and go to state 15
    IF              shift and go to state 5
    SUCC            shift and go to state 1
    PRED            shift and go to state 13
    ISZERO          shift and go to state 2
    TRUE            shift and go to state 3
    FALSE           shift and go to state 12
    ZERO            shift and go to state 6
    VARIABLE        shift and go to state 7
    OPENPAREN       shift and go to state 4

    expression                     shift and go to state 28
    expression3                    shift and go to state 8
    expression2                    shift and go to state 9
    expression4                    shift and go to state 10
    expression6                    shift and go to state 11

state 23

    (1) expression -> LAMBDA VARIABLE . TWOPOINTS type POINT expression

    TWOPOINTS       shift and go to state 29


state 24

    (8) expression4 -> SUCC OPENPAREN expression . CLOSEPAREN

    CLOSEPAREN      shift and go to state 30


state 25

    (10) expression4 -> ISZERO OPENPAREN expression . CLOSEPAREN

    CLOSEPAREN      shift and go to state 31


state 26

    (16) expression6 -> OPENPAREN expression CLOSEPAREN .

    LAMBDA          reduce using rule 16 (expression6 -> OPENPAREN expression CLOSEPAREN .)
    IF              reduce using rule 16 (expression6 -> OPENPAREN expression CLOSEPAREN .)
    SUCC            reduce using rule 16 (expression6 -> OPENPAREN expression CLOSEPAREN .)
    PRED            reduce using rule 16 (expression6 -> OPENPAREN expression CLOSEPAREN .)
    ISZERO          reduce using rule 16 (expression6 -> OPENPAREN expression CLOSEPAREN .)
    TRUE            reduce using rule 16 (expression6 -> OPENPAREN expression CLOSEPAREN .)
    FALSE           reduce using rule 16 (expression6 -> OPENPAREN expression CLOSEPAREN .)
    ZERO            reduce using rule 16 (expression6 -> OPENPAREN expression CLOSEPAREN .)
    VARIABLE        reduce using rule 16 (expression6 -> OPENPAREN expression CLOSEPAREN .)
    OPENPAREN       reduce using rule 16 (expression6 -> OPENPAREN expression CLOSEPAREN .)
    $end            reduce using rule 16 (expression6 -> OPENPAREN expression CLOSEPAREN .)
    CLOSEPAREN      reduce using rule 16 (expression6 -> OPENPAREN expression CLOSEPAREN .)
    THEN            reduce using rule 16 (expression6 -> OPENPAREN expression CLOSEPAREN .)
    ELSE            reduce using rule 16 (expression6 -> OPENPAREN expression CLOSEPAREN .)


state 27

    (3) expression2 -> IF expression THEN . expression ELSE expression
    (1) expression -> . LAMBDA VARIABLE TWOPOINTS type POINT expression
    (2) expression -> . expression2
    (3) expression2 -> . IF expression THEN expression ELSE expression
    (4) expression2 -> . expression3
    (5) expression3 -> . expression4 expression5
    (8) expression4 -> . SUCC OPENPAREN expression CLOSEPAREN
    (9) expression4 -> . PRED OPENPAREN expression CLOSEPAREN
    (10) expression4 -> . ISZERO OPENPAREN expression CLOSEPAREN
    (11) expression4 -> . expression6
    (12) expression6 -> . TRUE
    (13) expression6 -> . FALSE
    (14) expression6 -> . ZERO
    (15) expression6 -> . VARIABLE
    (16) expression6 -> . OPENPAREN expression CLOSEPAREN

    LAMBDA          shift and go to state 15
    IF              shift and go to state 5
    SUCC            shift and go to state 1
    PRED            shift and go to state 13
    ISZERO          shift and go to state 2
    TRUE            shift and go to state 3
    FALSE           shift and go to state 12
    ZERO            shift and go to state 6
    VARIABLE        shift and go to state 7
    OPENPAREN       shift and go to state 4

    expression                     shift and go to state 32
    expression3                    shift and go to state 8
    expression2                    shift and go to state 9
    expression4                    shift and go to state 10
    expression6                    shift and go to state 11

state 28

    (9) expression4 -> PRED OPENPAREN expression . CLOSEPAREN

    CLOSEPAREN      shift and go to state 33


state 29

    (1) expression -> LAMBDA VARIABLE TWOPOINTS . type POINT expression
    (17) type -> . BOOL T
    (18) type -> . NAT T

    BOOL            shift and go to state 36
    NAT             shift and go to state 34

    type                           shift and go to state 35

state 30

    (8) expression4 -> SUCC OPENPAREN expression CLOSEPAREN .

    LAMBDA          reduce using rule 8 (expression4 -> SUCC OPENPAREN expression CLOSEPAREN .)
    IF              reduce using rule 8 (expression4 -> SUCC OPENPAREN expression CLOSEPAREN .)
    SUCC            reduce using rule 8 (expression4 -> SUCC OPENPAREN expression CLOSEPAREN .)
    PRED            reduce using rule 8 (expression4 -> SUCC OPENPAREN expression CLOSEPAREN .)
    ISZERO          reduce using rule 8 (expression4 -> SUCC OPENPAREN expression CLOSEPAREN .)
    TRUE            reduce using rule 8 (expression4 -> SUCC OPENPAREN expression CLOSEPAREN .)
    FALSE           reduce using rule 8 (expression4 -> SUCC OPENPAREN expression CLOSEPAREN .)
    ZERO            reduce using rule 8 (expression4 -> SUCC OPENPAREN expression CLOSEPAREN .)
    VARIABLE        reduce using rule 8 (expression4 -> SUCC OPENPAREN expression CLOSEPAREN .)
    OPENPAREN       reduce using rule 8 (expression4 -> SUCC OPENPAREN expression CLOSEPAREN .)
    $end            reduce using rule 8 (expression4 -> SUCC OPENPAREN expression CLOSEPAREN .)
    CLOSEPAREN      reduce using rule 8 (expression4 -> SUCC OPENPAREN expression CLOSEPAREN .)
    THEN            reduce using rule 8 (expression4 -> SUCC OPENPAREN expression CLOSEPAREN .)
    ELSE            reduce using rule 8 (expression4 -> SUCC OPENPAREN expression CLOSEPAREN .)


state 31

    (10) expression4 -> ISZERO OPENPAREN expression CLOSEPAREN .

    LAMBDA          reduce using rule 10 (expression4 -> ISZERO OPENPAREN expression CLOSEPAREN .)
    IF              reduce using rule 10 (expression4 -> ISZERO OPENPAREN expression CLOSEPAREN .)
    SUCC            reduce using rule 10 (expression4 -> ISZERO OPENPAREN expression CLOSEPAREN .)
    PRED            reduce using rule 10 (expression4 -> ISZERO OPENPAREN expression CLOSEPAREN .)
    ISZERO          reduce using rule 10 (expression4 -> ISZERO OPENPAREN expression CLOSEPAREN .)
    TRUE            reduce using rule 10 (expression4 -> ISZERO OPENPAREN expression CLOSEPAREN .)
    FALSE           reduce using rule 10 (expression4 -> ISZERO OPENPAREN expression CLOSEPAREN .)
    ZERO            reduce using rule 10 (expression4 -> ISZERO OPENPAREN expression CLOSEPAREN .)
    VARIABLE        reduce using rule 10 (expression4 -> ISZERO OPENPAREN expression CLOSEPAREN .)
    OPENPAREN       reduce using rule 10 (expression4 -> ISZERO OPENPAREN expression CLOSEPAREN .)
    $end            reduce using rule 10 (expression4 -> ISZERO OPENPAREN expression CLOSEPAREN .)
    CLOSEPAREN      reduce using rule 10 (expression4 -> ISZERO OPENPAREN expression CLOSEPAREN .)
    THEN            reduce using rule 10 (expression4 -> ISZERO OPENPAREN expression CLOSEPAREN .)
    ELSE            reduce using rule 10 (expression4 -> ISZERO OPENPAREN expression CLOSEPAREN .)


state 32

    (3) expression2 -> IF expression THEN expression . ELSE expression

    ELSE            shift and go to state 37


state 33

    (9) expression4 -> PRED OPENPAREN expression CLOSEPAREN .

    LAMBDA          reduce using rule 9 (expression4 -> PRED OPENPAREN expression CLOSEPAREN .)
    IF              reduce using rule 9 (expression4 -> PRED OPENPAREN expression CLOSEPAREN .)
    SUCC            reduce using rule 9 (expression4 -> PRED OPENPAREN expression CLOSEPAREN .)
    PRED            reduce using rule 9 (expression4 -> PRED OPENPAREN expression CLOSEPAREN .)
    ISZERO          reduce using rule 9 (expression4 -> PRED OPENPAREN expression CLOSEPAREN .)
    TRUE            reduce using rule 9 (expression4 -> PRED OPENPAREN expression CLOSEPAREN .)
    FALSE           reduce using rule 9 (expression4 -> PRED OPENPAREN expression CLOSEPAREN .)
    ZERO            reduce using rule 9 (expression4 -> PRED OPENPAREN expression CLOSEPAREN .)
    VARIABLE        reduce using rule 9 (expression4 -> PRED OPENPAREN expression CLOSEPAREN .)
    OPENPAREN       reduce using rule 9 (expression4 -> PRED OPENPAREN expression CLOSEPAREN .)
    $end            reduce using rule 9 (expression4 -> PRED OPENPAREN expression CLOSEPAREN .)
    CLOSEPAREN      reduce using rule 9 (expression4 -> PRED OPENPAREN expression CLOSEPAREN .)
    THEN            reduce using rule 9 (expression4 -> PRED OPENPAREN expression CLOSEPAREN .)
    ELSE            reduce using rule 9 (expression4 -> PRED OPENPAREN expression CLOSEPAREN .)


state 34

    (18) type -> NAT . T
    (19) T -> . ARROW type
    (20) T -> .

    ARROW           shift and go to state 38
    POINT           reduce using rule 20 (T -> .)

    T                              shift and go to state 39

state 35

    (1) expression -> LAMBDA VARIABLE TWOPOINTS type . POINT expression

    POINT           shift and go to state 40


state 36

    (17) type -> BOOL . T
    (19) T -> . ARROW type
    (20) T -> .

    ARROW           shift and go to state 38
    POINT           reduce using rule 20 (T -> .)

    T                              shift and go to state 41

state 37

    (3) expression2 -> IF expression THEN expression ELSE . expression
    (1) expression -> . LAMBDA VARIABLE TWOPOINTS type POINT expression
    (2) expression -> . expression2
    (3) expression2 -> . IF expression THEN expression ELSE expression
    (4) expression2 -> . expression3
    (5) expression3 -> . expression4 expression5
    (8) expression4 -> . SUCC OPENPAREN expression CLOSEPAREN
    (9) expression4 -> . PRED OPENPAREN expression CLOSEPAREN
    (10) expression4 -> . ISZERO OPENPAREN expression CLOSEPAREN
    (11) expression4 -> . expression6
    (12) expression6 -> . TRUE
    (13) expression6 -> . FALSE
    (14) expression6 -> . ZERO
    (15) expression6 -> . VARIABLE
    (16) expression6 -> . OPENPAREN expression CLOSEPAREN

    LAMBDA          shift and go to state 15
    IF              shift and go to state 5
    SUCC            shift and go to state 1
    PRED            shift and go to state 13
    ISZERO          shift and go to state 2
    TRUE            shift and go to state 3
    FALSE           shift and go to state 12
    ZERO            shift and go to state 6
    VARIABLE        shift and go to state 7
    OPENPAREN       shift and go to state 4

    expression                     shift and go to state 42
    expression3                    shift and go to state 8
    expression2                    shift and go to state 9
    expression4                    shift and go to state 10
    expression6                    shift and go to state 11

state 38

    (19) T -> ARROW . type
    (17) type -> . BOOL T
    (18) type -> . NAT T

    BOOL            shift and go to state 36
    NAT             shift and go to state 34

    type                           shift and go to state 43

state 39

    (18) type -> NAT T .

    POINT           reduce using rule 18 (type -> NAT T .)


state 40

    (1) expression -> LAMBDA VARIABLE TWOPOINTS type POINT . expression
    (1) expression -> . LAMBDA VARIABLE TWOPOINTS type POINT expression
    (2) expression -> . expression2
    (3) expression2 -> . IF expression THEN expression ELSE expression
    (4) expression2 -> . expression3
    (5) expression3 -> . expression4 expression5
    (8) expression4 -> . SUCC OPENPAREN expression CLOSEPAREN
    (9) expression4 -> . PRED OPENPAREN expression CLOSEPAREN
    (10) expression4 -> . ISZERO OPENPAREN expression CLOSEPAREN
    (11) expression4 -> . expression6
    (12) expression6 -> . TRUE
    (13) expression6 -> . FALSE
    (14) expression6 -> . ZERO
    (15) expression6 -> . VARIABLE
    (16) expression6 -> . OPENPAREN expression CLOSEPAREN

    LAMBDA          shift and go to state 15
    IF              shift and go to state 5
    SUCC            shift and go to state 1
    PRED            shift and go to state 13
    ISZERO          shift and go to state 2
    TRUE            shift and go to state 3
    FALSE           shift and go to state 12
    ZERO            shift and go to state 6
    VARIABLE        shift and go to state 7
    OPENPAREN       shift and go to state 4

    expression                     shift and go to state 44
    expression3                    shift and go to state 8
    expression2                    shift and go to state 9
    expression4                    shift and go to state 10
    expression6                    shift and go to state 11

state 41

    (17) type -> BOOL T .

    POINT           reduce using rule 17 (type -> BOOL T .)


state 42

    (3) expression2 -> IF expression THEN expression ELSE expression .

    $end            reduce using rule 3 (expression2 -> IF expression THEN expression ELSE expression .)
    CLOSEPAREN      reduce using rule 3 (expression2 -> IF expression THEN expression ELSE expression .)
    THEN            reduce using rule 3 (expression2 -> IF expression THEN expression ELSE expression .)
    ELSE            reduce using rule 3 (expression2 -> IF expression THEN expression ELSE expression .)


state 43

    (19) T -> ARROW type .

    POINT           reduce using rule 19 (T -> ARROW type .)


state 44

    (1) expression -> LAMBDA VARIABLE TWOPOINTS type POINT expression .

    CLOSEPAREN      reduce using rule 1 (expression -> LAMBDA VARIABLE TWOPOINTS type POINT expression .)
    ELSE            reduce using rule 1 (expression -> LAMBDA VARIABLE TWOPOINTS type POINT expression .)
    $end            reduce using rule 1 (expression -> LAMBDA VARIABLE TWOPOINTS type POINT expression .)
    THEN            reduce using rule 1 (expression -> LAMBDA VARIABLE TWOPOINTS type POINT expression .)

