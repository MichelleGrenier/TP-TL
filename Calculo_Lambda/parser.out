Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> VARIABLE
Rule 2     expression -> TRUE
Rule 3     expression -> FALSE
Rule 4     expression -> IF expression THEN expression ELSE expression
Rule 5     expression -> LAMBDA VARIABLE TWOPOINTS type POINT expression
Rule 6     expression -> OPENPAREN expression CLOSEPAREN
Rule 7     expression -> expression expression
Rule 8     expression -> ZERO
Rule 9     expression -> SUCC OPENPAREN expression CLOSEPAREN
Rule 10    expression -> PRED OPENPAREN expression CLOSEPAREN
Rule 11    expression -> ISZERO OPENPAREN expression CLOSEPAREN
Rule 12    type -> BOOL
Rule 13    type -> NAT
Rule 14    type -> type ARROW type

Terminals, with rules where they appear

ARROW                : 14
BOOL                 : 12
CLOSEPAREN           : 6 9 10 11
ELSE                 : 4
FALSE                : 3
IF                   : 4
ISZERO               : 11
LAMBDA               : 5
NAT                  : 13
OPENPAREN            : 6 9 10 11
POINT                : 5
PRED                 : 10
SUCC                 : 9
THEN                 : 4
TRUE                 : 2
TWOPOINTS            : 5
VARIABLE             : 1 5
ZERO                 : 8
error                : 

Nonterminals, with rules where they appear

expression           : 4 4 4 5 6 7 7 9 10 11 0
type                 : 5 14 14

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . VARIABLE
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . LAMBDA VARIABLE TWOPOINTS type POINT expression
    (6) expression -> . OPENPAREN expression CLOSEPAREN
    (7) expression -> . expression expression
    (8) expression -> . ZERO
    (9) expression -> . SUCC OPENPAREN expression CLOSEPAREN
    (10) expression -> . PRED OPENPAREN expression CLOSEPAREN
    (11) expression -> . ISZERO OPENPAREN expression CLOSEPAREN

    VARIABLE        shift and go to state 7
    TRUE            shift and go to state 9
    FALSE           shift and go to state 2
    IF              shift and go to state 11
    LAMBDA          shift and go to state 8
    OPENPAREN       shift and go to state 10
    ZERO            shift and go to state 6
    SUCC            shift and go to state 4
    PRED            shift and go to state 5
    ISZERO          shift and go to state 1

    expression                     shift and go to state 3

state 1

    (11) expression -> ISZERO . OPENPAREN expression CLOSEPAREN

    OPENPAREN       shift and go to state 12


state 2

    (3) expression -> FALSE .

    VARIABLE        reduce using rule 3 (expression -> FALSE .)
    TRUE            reduce using rule 3 (expression -> FALSE .)
    FALSE           reduce using rule 3 (expression -> FALSE .)
    IF              reduce using rule 3 (expression -> FALSE .)
    LAMBDA          reduce using rule 3 (expression -> FALSE .)
    OPENPAREN       reduce using rule 3 (expression -> FALSE .)
    ZERO            reduce using rule 3 (expression -> FALSE .)
    SUCC            reduce using rule 3 (expression -> FALSE .)
    PRED            reduce using rule 3 (expression -> FALSE .)
    ISZERO          reduce using rule 3 (expression -> FALSE .)
    ELSE            reduce using rule 3 (expression -> FALSE .)
    CLOSEPAREN      reduce using rule 3 (expression -> FALSE .)
    $end            reduce using rule 3 (expression -> FALSE .)
    THEN            reduce using rule 3 (expression -> FALSE .)


state 3

    (0) S' -> expression .
    (7) expression -> expression . expression
    (1) expression -> . VARIABLE
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . LAMBDA VARIABLE TWOPOINTS type POINT expression
    (6) expression -> . OPENPAREN expression CLOSEPAREN
    (7) expression -> . expression expression
    (8) expression -> . ZERO
    (9) expression -> . SUCC OPENPAREN expression CLOSEPAREN
    (10) expression -> . PRED OPENPAREN expression CLOSEPAREN
    (11) expression -> . ISZERO OPENPAREN expression CLOSEPAREN

    VARIABLE        shift and go to state 7
    TRUE            shift and go to state 9
    FALSE           shift and go to state 2
    IF              shift and go to state 11
    LAMBDA          shift and go to state 8
    OPENPAREN       shift and go to state 10
    ZERO            shift and go to state 6
    SUCC            shift and go to state 4
    PRED            shift and go to state 5
    ISZERO          shift and go to state 1

    expression                     shift and go to state 13

state 4

    (9) expression -> SUCC . OPENPAREN expression CLOSEPAREN

    OPENPAREN       shift and go to state 14


state 5

    (10) expression -> PRED . OPENPAREN expression CLOSEPAREN

    OPENPAREN       shift and go to state 15


state 6

    (8) expression -> ZERO .

    VARIABLE        reduce using rule 8 (expression -> ZERO .)
    TRUE            reduce using rule 8 (expression -> ZERO .)
    FALSE           reduce using rule 8 (expression -> ZERO .)
    IF              reduce using rule 8 (expression -> ZERO .)
    LAMBDA          reduce using rule 8 (expression -> ZERO .)
    OPENPAREN       reduce using rule 8 (expression -> ZERO .)
    ZERO            reduce using rule 8 (expression -> ZERO .)
    SUCC            reduce using rule 8 (expression -> ZERO .)
    PRED            reduce using rule 8 (expression -> ZERO .)
    ISZERO          reduce using rule 8 (expression -> ZERO .)
    ELSE            reduce using rule 8 (expression -> ZERO .)
    CLOSEPAREN      reduce using rule 8 (expression -> ZERO .)
    $end            reduce using rule 8 (expression -> ZERO .)
    THEN            reduce using rule 8 (expression -> ZERO .)


state 7

    (1) expression -> VARIABLE .

    VARIABLE        reduce using rule 1 (expression -> VARIABLE .)
    TRUE            reduce using rule 1 (expression -> VARIABLE .)
    FALSE           reduce using rule 1 (expression -> VARIABLE .)
    IF              reduce using rule 1 (expression -> VARIABLE .)
    LAMBDA          reduce using rule 1 (expression -> VARIABLE .)
    OPENPAREN       reduce using rule 1 (expression -> VARIABLE .)
    ZERO            reduce using rule 1 (expression -> VARIABLE .)
    SUCC            reduce using rule 1 (expression -> VARIABLE .)
    PRED            reduce using rule 1 (expression -> VARIABLE .)
    ISZERO          reduce using rule 1 (expression -> VARIABLE .)
    ELSE            reduce using rule 1 (expression -> VARIABLE .)
    CLOSEPAREN      reduce using rule 1 (expression -> VARIABLE .)
    $end            reduce using rule 1 (expression -> VARIABLE .)
    THEN            reduce using rule 1 (expression -> VARIABLE .)


state 8

    (5) expression -> LAMBDA . VARIABLE TWOPOINTS type POINT expression

    VARIABLE        shift and go to state 16


state 9

    (2) expression -> TRUE .

    VARIABLE        reduce using rule 2 (expression -> TRUE .)
    TRUE            reduce using rule 2 (expression -> TRUE .)
    FALSE           reduce using rule 2 (expression -> TRUE .)
    IF              reduce using rule 2 (expression -> TRUE .)
    LAMBDA          reduce using rule 2 (expression -> TRUE .)
    OPENPAREN       reduce using rule 2 (expression -> TRUE .)
    ZERO            reduce using rule 2 (expression -> TRUE .)
    SUCC            reduce using rule 2 (expression -> TRUE .)
    PRED            reduce using rule 2 (expression -> TRUE .)
    ISZERO          reduce using rule 2 (expression -> TRUE .)
    ELSE            reduce using rule 2 (expression -> TRUE .)
    CLOSEPAREN      reduce using rule 2 (expression -> TRUE .)
    $end            reduce using rule 2 (expression -> TRUE .)
    THEN            reduce using rule 2 (expression -> TRUE .)


state 10

    (6) expression -> OPENPAREN . expression CLOSEPAREN
    (1) expression -> . VARIABLE
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . LAMBDA VARIABLE TWOPOINTS type POINT expression
    (6) expression -> . OPENPAREN expression CLOSEPAREN
    (7) expression -> . expression expression
    (8) expression -> . ZERO
    (9) expression -> . SUCC OPENPAREN expression CLOSEPAREN
    (10) expression -> . PRED OPENPAREN expression CLOSEPAREN
    (11) expression -> . ISZERO OPENPAREN expression CLOSEPAREN

    VARIABLE        shift and go to state 7
    TRUE            shift and go to state 9
    FALSE           shift and go to state 2
    IF              shift and go to state 11
    LAMBDA          shift and go to state 8
    OPENPAREN       shift and go to state 10
    ZERO            shift and go to state 6
    SUCC            shift and go to state 4
    PRED            shift and go to state 5
    ISZERO          shift and go to state 1

    expression                     shift and go to state 17

state 11

    (4) expression -> IF . expression THEN expression ELSE expression
    (1) expression -> . VARIABLE
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . LAMBDA VARIABLE TWOPOINTS type POINT expression
    (6) expression -> . OPENPAREN expression CLOSEPAREN
    (7) expression -> . expression expression
    (8) expression -> . ZERO
    (9) expression -> . SUCC OPENPAREN expression CLOSEPAREN
    (10) expression -> . PRED OPENPAREN expression CLOSEPAREN
    (11) expression -> . ISZERO OPENPAREN expression CLOSEPAREN

    VARIABLE        shift and go to state 7
    TRUE            shift and go to state 9
    FALSE           shift and go to state 2
    IF              shift and go to state 11
    LAMBDA          shift and go to state 8
    OPENPAREN       shift and go to state 10
    ZERO            shift and go to state 6
    SUCC            shift and go to state 4
    PRED            shift and go to state 5
    ISZERO          shift and go to state 1

    expression                     shift and go to state 18

state 12

    (11) expression -> ISZERO OPENPAREN . expression CLOSEPAREN
    (1) expression -> . VARIABLE
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . LAMBDA VARIABLE TWOPOINTS type POINT expression
    (6) expression -> . OPENPAREN expression CLOSEPAREN
    (7) expression -> . expression expression
    (8) expression -> . ZERO
    (9) expression -> . SUCC OPENPAREN expression CLOSEPAREN
    (10) expression -> . PRED OPENPAREN expression CLOSEPAREN
    (11) expression -> . ISZERO OPENPAREN expression CLOSEPAREN

    VARIABLE        shift and go to state 7
    TRUE            shift and go to state 9
    FALSE           shift and go to state 2
    IF              shift and go to state 11
    LAMBDA          shift and go to state 8
    OPENPAREN       shift and go to state 10
    ZERO            shift and go to state 6
    SUCC            shift and go to state 4
    PRED            shift and go to state 5
    ISZERO          shift and go to state 1

    expression                     shift and go to state 19

state 13

    (7) expression -> expression expression .
    (7) expression -> expression . expression
    (1) expression -> . VARIABLE
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . LAMBDA VARIABLE TWOPOINTS type POINT expression
    (6) expression -> . OPENPAREN expression CLOSEPAREN
    (7) expression -> . expression expression
    (8) expression -> . ZERO
    (9) expression -> . SUCC OPENPAREN expression CLOSEPAREN
    (10) expression -> . PRED OPENPAREN expression CLOSEPAREN
    (11) expression -> . ISZERO OPENPAREN expression CLOSEPAREN

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for LAMBDA resolved as shift
  ! shift/reduce conflict for OPENPAREN resolved as shift
  ! shift/reduce conflict for ZERO resolved as shift
  ! shift/reduce conflict for SUCC resolved as shift
  ! shift/reduce conflict for PRED resolved as shift
  ! shift/reduce conflict for ISZERO resolved as shift
    ELSE            reduce using rule 7 (expression -> expression expression .)
    CLOSEPAREN      reduce using rule 7 (expression -> expression expression .)
    $end            reduce using rule 7 (expression -> expression expression .)
    THEN            reduce using rule 7 (expression -> expression expression .)
    VARIABLE        shift and go to state 7
    TRUE            shift and go to state 9
    FALSE           shift and go to state 2
    IF              shift and go to state 11
    LAMBDA          shift and go to state 8
    OPENPAREN       shift and go to state 10
    ZERO            shift and go to state 6
    SUCC            shift and go to state 4
    PRED            shift and go to state 5
    ISZERO          shift and go to state 1

  ! VARIABLE        [ reduce using rule 7 (expression -> expression expression .) ]
  ! TRUE            [ reduce using rule 7 (expression -> expression expression .) ]
  ! FALSE           [ reduce using rule 7 (expression -> expression expression .) ]
  ! IF              [ reduce using rule 7 (expression -> expression expression .) ]
  ! LAMBDA          [ reduce using rule 7 (expression -> expression expression .) ]
  ! OPENPAREN       [ reduce using rule 7 (expression -> expression expression .) ]
  ! ZERO            [ reduce using rule 7 (expression -> expression expression .) ]
  ! SUCC            [ reduce using rule 7 (expression -> expression expression .) ]
  ! PRED            [ reduce using rule 7 (expression -> expression expression .) ]
  ! ISZERO          [ reduce using rule 7 (expression -> expression expression .) ]

    expression                     shift and go to state 13

state 14

    (9) expression -> SUCC OPENPAREN . expression CLOSEPAREN
    (1) expression -> . VARIABLE
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . LAMBDA VARIABLE TWOPOINTS type POINT expression
    (6) expression -> . OPENPAREN expression CLOSEPAREN
    (7) expression -> . expression expression
    (8) expression -> . ZERO
    (9) expression -> . SUCC OPENPAREN expression CLOSEPAREN
    (10) expression -> . PRED OPENPAREN expression CLOSEPAREN
    (11) expression -> . ISZERO OPENPAREN expression CLOSEPAREN

    VARIABLE        shift and go to state 7
    TRUE            shift and go to state 9
    FALSE           shift and go to state 2
    IF              shift and go to state 11
    LAMBDA          shift and go to state 8
    OPENPAREN       shift and go to state 10
    ZERO            shift and go to state 6
    SUCC            shift and go to state 4
    PRED            shift and go to state 5
    ISZERO          shift and go to state 1

    expression                     shift and go to state 20

state 15

    (10) expression -> PRED OPENPAREN . expression CLOSEPAREN
    (1) expression -> . VARIABLE
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . LAMBDA VARIABLE TWOPOINTS type POINT expression
    (6) expression -> . OPENPAREN expression CLOSEPAREN
    (7) expression -> . expression expression
    (8) expression -> . ZERO
    (9) expression -> . SUCC OPENPAREN expression CLOSEPAREN
    (10) expression -> . PRED OPENPAREN expression CLOSEPAREN
    (11) expression -> . ISZERO OPENPAREN expression CLOSEPAREN

    VARIABLE        shift and go to state 7
    TRUE            shift and go to state 9
    FALSE           shift and go to state 2
    IF              shift and go to state 11
    LAMBDA          shift and go to state 8
    OPENPAREN       shift and go to state 10
    ZERO            shift and go to state 6
    SUCC            shift and go to state 4
    PRED            shift and go to state 5
    ISZERO          shift and go to state 1

    expression                     shift and go to state 21

state 16

    (5) expression -> LAMBDA VARIABLE . TWOPOINTS type POINT expression

    TWOPOINTS       shift and go to state 22


state 17

    (6) expression -> OPENPAREN expression . CLOSEPAREN
    (7) expression -> expression . expression
    (1) expression -> . VARIABLE
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . LAMBDA VARIABLE TWOPOINTS type POINT expression
    (6) expression -> . OPENPAREN expression CLOSEPAREN
    (7) expression -> . expression expression
    (8) expression -> . ZERO
    (9) expression -> . SUCC OPENPAREN expression CLOSEPAREN
    (10) expression -> . PRED OPENPAREN expression CLOSEPAREN
    (11) expression -> . ISZERO OPENPAREN expression CLOSEPAREN

    CLOSEPAREN      shift and go to state 23
    VARIABLE        shift and go to state 7
    TRUE            shift and go to state 9
    FALSE           shift and go to state 2
    IF              shift and go to state 11
    LAMBDA          shift and go to state 8
    OPENPAREN       shift and go to state 10
    ZERO            shift and go to state 6
    SUCC            shift and go to state 4
    PRED            shift and go to state 5
    ISZERO          shift and go to state 1

    expression                     shift and go to state 13

state 18

    (4) expression -> IF expression . THEN expression ELSE expression
    (7) expression -> expression . expression
    (1) expression -> . VARIABLE
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . LAMBDA VARIABLE TWOPOINTS type POINT expression
    (6) expression -> . OPENPAREN expression CLOSEPAREN
    (7) expression -> . expression expression
    (8) expression -> . ZERO
    (9) expression -> . SUCC OPENPAREN expression CLOSEPAREN
    (10) expression -> . PRED OPENPAREN expression CLOSEPAREN
    (11) expression -> . ISZERO OPENPAREN expression CLOSEPAREN

    THEN            shift and go to state 24
    VARIABLE        shift and go to state 7
    TRUE            shift and go to state 9
    FALSE           shift and go to state 2
    IF              shift and go to state 11
    LAMBDA          shift and go to state 8
    OPENPAREN       shift and go to state 10
    ZERO            shift and go to state 6
    SUCC            shift and go to state 4
    PRED            shift and go to state 5
    ISZERO          shift and go to state 1

    expression                     shift and go to state 13

state 19

    (11) expression -> ISZERO OPENPAREN expression . CLOSEPAREN
    (7) expression -> expression . expression
    (1) expression -> . VARIABLE
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . LAMBDA VARIABLE TWOPOINTS type POINT expression
    (6) expression -> . OPENPAREN expression CLOSEPAREN
    (7) expression -> . expression expression
    (8) expression -> . ZERO
    (9) expression -> . SUCC OPENPAREN expression CLOSEPAREN
    (10) expression -> . PRED OPENPAREN expression CLOSEPAREN
    (11) expression -> . ISZERO OPENPAREN expression CLOSEPAREN

    CLOSEPAREN      shift and go to state 25
    VARIABLE        shift and go to state 7
    TRUE            shift and go to state 9
    FALSE           shift and go to state 2
    IF              shift and go to state 11
    LAMBDA          shift and go to state 8
    OPENPAREN       shift and go to state 10
    ZERO            shift and go to state 6
    SUCC            shift and go to state 4
    PRED            shift and go to state 5
    ISZERO          shift and go to state 1

    expression                     shift and go to state 13

state 20

    (9) expression -> SUCC OPENPAREN expression . CLOSEPAREN
    (7) expression -> expression . expression
    (1) expression -> . VARIABLE
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . LAMBDA VARIABLE TWOPOINTS type POINT expression
    (6) expression -> . OPENPAREN expression CLOSEPAREN
    (7) expression -> . expression expression
    (8) expression -> . ZERO
    (9) expression -> . SUCC OPENPAREN expression CLOSEPAREN
    (10) expression -> . PRED OPENPAREN expression CLOSEPAREN
    (11) expression -> . ISZERO OPENPAREN expression CLOSEPAREN

    CLOSEPAREN      shift and go to state 26
    VARIABLE        shift and go to state 7
    TRUE            shift and go to state 9
    FALSE           shift and go to state 2
    IF              shift and go to state 11
    LAMBDA          shift and go to state 8
    OPENPAREN       shift and go to state 10
    ZERO            shift and go to state 6
    SUCC            shift and go to state 4
    PRED            shift and go to state 5
    ISZERO          shift and go to state 1

    expression                     shift and go to state 13

state 21

    (10) expression -> PRED OPENPAREN expression . CLOSEPAREN
    (7) expression -> expression . expression
    (1) expression -> . VARIABLE
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . LAMBDA VARIABLE TWOPOINTS type POINT expression
    (6) expression -> . OPENPAREN expression CLOSEPAREN
    (7) expression -> . expression expression
    (8) expression -> . ZERO
    (9) expression -> . SUCC OPENPAREN expression CLOSEPAREN
    (10) expression -> . PRED OPENPAREN expression CLOSEPAREN
    (11) expression -> . ISZERO OPENPAREN expression CLOSEPAREN

    CLOSEPAREN      shift and go to state 27
    VARIABLE        shift and go to state 7
    TRUE            shift and go to state 9
    FALSE           shift and go to state 2
    IF              shift and go to state 11
    LAMBDA          shift and go to state 8
    OPENPAREN       shift and go to state 10
    ZERO            shift and go to state 6
    SUCC            shift and go to state 4
    PRED            shift and go to state 5
    ISZERO          shift and go to state 1

    expression                     shift and go to state 13

state 22

    (5) expression -> LAMBDA VARIABLE TWOPOINTS . type POINT expression
    (12) type -> . BOOL
    (13) type -> . NAT
    (14) type -> . type ARROW type

    BOOL            shift and go to state 30
    NAT             shift and go to state 28

    type                           shift and go to state 29

state 23

    (6) expression -> OPENPAREN expression CLOSEPAREN .

    VARIABLE        reduce using rule 6 (expression -> OPENPAREN expression CLOSEPAREN .)
    TRUE            reduce using rule 6 (expression -> OPENPAREN expression CLOSEPAREN .)
    FALSE           reduce using rule 6 (expression -> OPENPAREN expression CLOSEPAREN .)
    IF              reduce using rule 6 (expression -> OPENPAREN expression CLOSEPAREN .)
    LAMBDA          reduce using rule 6 (expression -> OPENPAREN expression CLOSEPAREN .)
    OPENPAREN       reduce using rule 6 (expression -> OPENPAREN expression CLOSEPAREN .)
    ZERO            reduce using rule 6 (expression -> OPENPAREN expression CLOSEPAREN .)
    SUCC            reduce using rule 6 (expression -> OPENPAREN expression CLOSEPAREN .)
    PRED            reduce using rule 6 (expression -> OPENPAREN expression CLOSEPAREN .)
    ISZERO          reduce using rule 6 (expression -> OPENPAREN expression CLOSEPAREN .)
    ELSE            reduce using rule 6 (expression -> OPENPAREN expression CLOSEPAREN .)
    CLOSEPAREN      reduce using rule 6 (expression -> OPENPAREN expression CLOSEPAREN .)
    $end            reduce using rule 6 (expression -> OPENPAREN expression CLOSEPAREN .)
    THEN            reduce using rule 6 (expression -> OPENPAREN expression CLOSEPAREN .)


state 24

    (4) expression -> IF expression THEN . expression ELSE expression
    (1) expression -> . VARIABLE
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . LAMBDA VARIABLE TWOPOINTS type POINT expression
    (6) expression -> . OPENPAREN expression CLOSEPAREN
    (7) expression -> . expression expression
    (8) expression -> . ZERO
    (9) expression -> . SUCC OPENPAREN expression CLOSEPAREN
    (10) expression -> . PRED OPENPAREN expression CLOSEPAREN
    (11) expression -> . ISZERO OPENPAREN expression CLOSEPAREN

    VARIABLE        shift and go to state 7
    TRUE            shift and go to state 9
    FALSE           shift and go to state 2
    IF              shift and go to state 11
    LAMBDA          shift and go to state 8
    OPENPAREN       shift and go to state 10
    ZERO            shift and go to state 6
    SUCC            shift and go to state 4
    PRED            shift and go to state 5
    ISZERO          shift and go to state 1

    expression                     shift and go to state 31

state 25

    (11) expression -> ISZERO OPENPAREN expression CLOSEPAREN .

    VARIABLE        reduce using rule 11 (expression -> ISZERO OPENPAREN expression CLOSEPAREN .)
    TRUE            reduce using rule 11 (expression -> ISZERO OPENPAREN expression CLOSEPAREN .)
    FALSE           reduce using rule 11 (expression -> ISZERO OPENPAREN expression CLOSEPAREN .)
    IF              reduce using rule 11 (expression -> ISZERO OPENPAREN expression CLOSEPAREN .)
    LAMBDA          reduce using rule 11 (expression -> ISZERO OPENPAREN expression CLOSEPAREN .)
    OPENPAREN       reduce using rule 11 (expression -> ISZERO OPENPAREN expression CLOSEPAREN .)
    ZERO            reduce using rule 11 (expression -> ISZERO OPENPAREN expression CLOSEPAREN .)
    SUCC            reduce using rule 11 (expression -> ISZERO OPENPAREN expression CLOSEPAREN .)
    PRED            reduce using rule 11 (expression -> ISZERO OPENPAREN expression CLOSEPAREN .)
    ISZERO          reduce using rule 11 (expression -> ISZERO OPENPAREN expression CLOSEPAREN .)
    ELSE            reduce using rule 11 (expression -> ISZERO OPENPAREN expression CLOSEPAREN .)
    CLOSEPAREN      reduce using rule 11 (expression -> ISZERO OPENPAREN expression CLOSEPAREN .)
    $end            reduce using rule 11 (expression -> ISZERO OPENPAREN expression CLOSEPAREN .)
    THEN            reduce using rule 11 (expression -> ISZERO OPENPAREN expression CLOSEPAREN .)


state 26

    (9) expression -> SUCC OPENPAREN expression CLOSEPAREN .

    VARIABLE        reduce using rule 9 (expression -> SUCC OPENPAREN expression CLOSEPAREN .)
    TRUE            reduce using rule 9 (expression -> SUCC OPENPAREN expression CLOSEPAREN .)
    FALSE           reduce using rule 9 (expression -> SUCC OPENPAREN expression CLOSEPAREN .)
    IF              reduce using rule 9 (expression -> SUCC OPENPAREN expression CLOSEPAREN .)
    LAMBDA          reduce using rule 9 (expression -> SUCC OPENPAREN expression CLOSEPAREN .)
    OPENPAREN       reduce using rule 9 (expression -> SUCC OPENPAREN expression CLOSEPAREN .)
    ZERO            reduce using rule 9 (expression -> SUCC OPENPAREN expression CLOSEPAREN .)
    SUCC            reduce using rule 9 (expression -> SUCC OPENPAREN expression CLOSEPAREN .)
    PRED            reduce using rule 9 (expression -> SUCC OPENPAREN expression CLOSEPAREN .)
    ISZERO          reduce using rule 9 (expression -> SUCC OPENPAREN expression CLOSEPAREN .)
    ELSE            reduce using rule 9 (expression -> SUCC OPENPAREN expression CLOSEPAREN .)
    CLOSEPAREN      reduce using rule 9 (expression -> SUCC OPENPAREN expression CLOSEPAREN .)
    $end            reduce using rule 9 (expression -> SUCC OPENPAREN expression CLOSEPAREN .)
    THEN            reduce using rule 9 (expression -> SUCC OPENPAREN expression CLOSEPAREN .)


state 27

    (10) expression -> PRED OPENPAREN expression CLOSEPAREN .

    VARIABLE        reduce using rule 10 (expression -> PRED OPENPAREN expression CLOSEPAREN .)
    TRUE            reduce using rule 10 (expression -> PRED OPENPAREN expression CLOSEPAREN .)
    FALSE           reduce using rule 10 (expression -> PRED OPENPAREN expression CLOSEPAREN .)
    IF              reduce using rule 10 (expression -> PRED OPENPAREN expression CLOSEPAREN .)
    LAMBDA          reduce using rule 10 (expression -> PRED OPENPAREN expression CLOSEPAREN .)
    OPENPAREN       reduce using rule 10 (expression -> PRED OPENPAREN expression CLOSEPAREN .)
    ZERO            reduce using rule 10 (expression -> PRED OPENPAREN expression CLOSEPAREN .)
    SUCC            reduce using rule 10 (expression -> PRED OPENPAREN expression CLOSEPAREN .)
    PRED            reduce using rule 10 (expression -> PRED OPENPAREN expression CLOSEPAREN .)
    ISZERO          reduce using rule 10 (expression -> PRED OPENPAREN expression CLOSEPAREN .)
    ELSE            reduce using rule 10 (expression -> PRED OPENPAREN expression CLOSEPAREN .)
    CLOSEPAREN      reduce using rule 10 (expression -> PRED OPENPAREN expression CLOSEPAREN .)
    $end            reduce using rule 10 (expression -> PRED OPENPAREN expression CLOSEPAREN .)
    THEN            reduce using rule 10 (expression -> PRED OPENPAREN expression CLOSEPAREN .)


state 28

    (13) type -> NAT .

    ARROW           reduce using rule 13 (type -> NAT .)
    POINT           reduce using rule 13 (type -> NAT .)


state 29

    (5) expression -> LAMBDA VARIABLE TWOPOINTS type . POINT expression
    (14) type -> type . ARROW type

    POINT           shift and go to state 33
    ARROW           shift and go to state 32


state 30

    (12) type -> BOOL .

    ARROW           reduce using rule 12 (type -> BOOL .)
    POINT           reduce using rule 12 (type -> BOOL .)


state 31

    (4) expression -> IF expression THEN expression . ELSE expression
    (7) expression -> expression . expression
    (1) expression -> . VARIABLE
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . LAMBDA VARIABLE TWOPOINTS type POINT expression
    (6) expression -> . OPENPAREN expression CLOSEPAREN
    (7) expression -> . expression expression
    (8) expression -> . ZERO
    (9) expression -> . SUCC OPENPAREN expression CLOSEPAREN
    (10) expression -> . PRED OPENPAREN expression CLOSEPAREN
    (11) expression -> . ISZERO OPENPAREN expression CLOSEPAREN

    ELSE            shift and go to state 34
    VARIABLE        shift and go to state 7
    TRUE            shift and go to state 9
    FALSE           shift and go to state 2
    IF              shift and go to state 11
    LAMBDA          shift and go to state 8
    OPENPAREN       shift and go to state 10
    ZERO            shift and go to state 6
    SUCC            shift and go to state 4
    PRED            shift and go to state 5
    ISZERO          shift and go to state 1

    expression                     shift and go to state 13

state 32

    (14) type -> type ARROW . type
    (12) type -> . BOOL
    (13) type -> . NAT
    (14) type -> . type ARROW type

    BOOL            shift and go to state 30
    NAT             shift and go to state 28

    type                           shift and go to state 35

state 33

    (5) expression -> LAMBDA VARIABLE TWOPOINTS type POINT . expression
    (1) expression -> . VARIABLE
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . LAMBDA VARIABLE TWOPOINTS type POINT expression
    (6) expression -> . OPENPAREN expression CLOSEPAREN
    (7) expression -> . expression expression
    (8) expression -> . ZERO
    (9) expression -> . SUCC OPENPAREN expression CLOSEPAREN
    (10) expression -> . PRED OPENPAREN expression CLOSEPAREN
    (11) expression -> . ISZERO OPENPAREN expression CLOSEPAREN

    VARIABLE        shift and go to state 7
    TRUE            shift and go to state 9
    FALSE           shift and go to state 2
    IF              shift and go to state 11
    LAMBDA          shift and go to state 8
    OPENPAREN       shift and go to state 10
    ZERO            shift and go to state 6
    SUCC            shift and go to state 4
    PRED            shift and go to state 5
    ISZERO          shift and go to state 1

    expression                     shift and go to state 36

state 34

    (4) expression -> IF expression THEN expression ELSE . expression
    (1) expression -> . VARIABLE
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . LAMBDA VARIABLE TWOPOINTS type POINT expression
    (6) expression -> . OPENPAREN expression CLOSEPAREN
    (7) expression -> . expression expression
    (8) expression -> . ZERO
    (9) expression -> . SUCC OPENPAREN expression CLOSEPAREN
    (10) expression -> . PRED OPENPAREN expression CLOSEPAREN
    (11) expression -> . ISZERO OPENPAREN expression CLOSEPAREN

    VARIABLE        shift and go to state 7
    TRUE            shift and go to state 9
    FALSE           shift and go to state 2
    IF              shift and go to state 11
    LAMBDA          shift and go to state 8
    OPENPAREN       shift and go to state 10
    ZERO            shift and go to state 6
    SUCC            shift and go to state 4
    PRED            shift and go to state 5
    ISZERO          shift and go to state 1

    expression                     shift and go to state 37

state 35

    (14) type -> type ARROW type .
    (14) type -> type . ARROW type

  ! shift/reduce conflict for ARROW resolved as shift
    POINT           reduce using rule 14 (type -> type ARROW type .)
    ARROW           shift and go to state 32

  ! ARROW           [ reduce using rule 14 (type -> type ARROW type .) ]


state 36

    (5) expression -> LAMBDA VARIABLE TWOPOINTS type POINT expression .
    (7) expression -> expression . expression
    (1) expression -> . VARIABLE
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . LAMBDA VARIABLE TWOPOINTS type POINT expression
    (6) expression -> . OPENPAREN expression CLOSEPAREN
    (7) expression -> . expression expression
    (8) expression -> . ZERO
    (9) expression -> . SUCC OPENPAREN expression CLOSEPAREN
    (10) expression -> . PRED OPENPAREN expression CLOSEPAREN
    (11) expression -> . ISZERO OPENPAREN expression CLOSEPAREN

    PRED            reduce using rule 5 (expression -> LAMBDA VARIABLE TWOPOINTS type POINT expression .)
    ELSE            reduce using rule 5 (expression -> LAMBDA VARIABLE TWOPOINTS type POINT expression .)
    CLOSEPAREN      reduce using rule 5 (expression -> LAMBDA VARIABLE TWOPOINTS type POINT expression .)
    $end            reduce using rule 5 (expression -> LAMBDA VARIABLE TWOPOINTS type POINT expression .)
    THEN            reduce using rule 5 (expression -> LAMBDA VARIABLE TWOPOINTS type POINT expression .)
    VARIABLE        shift and go to state 7
    TRUE            shift and go to state 9
    FALSE           shift and go to state 2
    IF              shift and go to state 11
    LAMBDA          shift and go to state 8
    OPENPAREN       shift and go to state 10
    ZERO            shift and go to state 6
    SUCC            shift and go to state 4
    ISZERO          shift and go to state 1

  ! VARIABLE        [ reduce using rule 5 (expression -> LAMBDA VARIABLE TWOPOINTS type POINT expression .) ]
  ! TRUE            [ reduce using rule 5 (expression -> LAMBDA VARIABLE TWOPOINTS type POINT expression .) ]
  ! FALSE           [ reduce using rule 5 (expression -> LAMBDA VARIABLE TWOPOINTS type POINT expression .) ]
  ! IF              [ reduce using rule 5 (expression -> LAMBDA VARIABLE TWOPOINTS type POINT expression .) ]
  ! LAMBDA          [ reduce using rule 5 (expression -> LAMBDA VARIABLE TWOPOINTS type POINT expression .) ]
  ! OPENPAREN       [ reduce using rule 5 (expression -> LAMBDA VARIABLE TWOPOINTS type POINT expression .) ]
  ! ZERO            [ reduce using rule 5 (expression -> LAMBDA VARIABLE TWOPOINTS type POINT expression .) ]
  ! SUCC            [ reduce using rule 5 (expression -> LAMBDA VARIABLE TWOPOINTS type POINT expression .) ]
  ! ISZERO          [ reduce using rule 5 (expression -> LAMBDA VARIABLE TWOPOINTS type POINT expression .) ]
  ! PRED            [ shift and go to state 5 ]

    expression                     shift and go to state 13

state 37

    (4) expression -> IF expression THEN expression ELSE expression .
    (7) expression -> expression . expression
    (1) expression -> . VARIABLE
    (2) expression -> . TRUE
    (3) expression -> . FALSE
    (4) expression -> . IF expression THEN expression ELSE expression
    (5) expression -> . LAMBDA VARIABLE TWOPOINTS type POINT expression
    (6) expression -> . OPENPAREN expression CLOSEPAREN
    (7) expression -> . expression expression
    (8) expression -> . ZERO
    (9) expression -> . SUCC OPENPAREN expression CLOSEPAREN
    (10) expression -> . PRED OPENPAREN expression CLOSEPAREN
    (11) expression -> . ISZERO OPENPAREN expression CLOSEPAREN

    VARIABLE        reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .)
    LAMBDA          reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .)
    PRED            reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .)
    ELSE            reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .)
    CLOSEPAREN      reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .)
    $end            reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .)
    THEN            reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .)
    TRUE            shift and go to state 9
    FALSE           shift and go to state 2
    IF              shift and go to state 11
    OPENPAREN       shift and go to state 10
    ZERO            shift and go to state 6
    SUCC            shift and go to state 4
    ISZERO          shift and go to state 1

  ! TRUE            [ reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .) ]
  ! FALSE           [ reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .) ]
  ! IF              [ reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .) ]
  ! OPENPAREN       [ reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .) ]
  ! ZERO            [ reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .) ]
  ! SUCC            [ reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .) ]
  ! ISZERO          [ reduce using rule 4 (expression -> IF expression THEN expression ELSE expression .) ]
  ! VARIABLE        [ shift and go to state 7 ]
  ! LAMBDA          [ shift and go to state 8 ]
  ! PRED            [ shift and go to state 5 ]

    expression                     shift and go to state 13
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VARIABLE in state 13 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 13 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 13 resolved as shift
WARNING: shift/reduce conflict for IF in state 13 resolved as shift
WARNING: shift/reduce conflict for LAMBDA in state 13 resolved as shift
WARNING: shift/reduce conflict for OPENPAREN in state 13 resolved as shift
WARNING: shift/reduce conflict for ZERO in state 13 resolved as shift
WARNING: shift/reduce conflict for SUCC in state 13 resolved as shift
WARNING: shift/reduce conflict for PRED in state 13 resolved as shift
WARNING: shift/reduce conflict for ISZERO in state 13 resolved as shift
WARNING: shift/reduce conflict for ARROW in state 35 resolved as shift
